@charset "UTF-8";
/**
 * ==============================================
 * Fendy Framework
 * Version 1.0.0
 * https://github.com/Fendy/fendy-framework
 * Licensed under MIT
 * ==============================================
 *
 * Developed by Luis Fernando Saavedra Meza
 * Copyright 2017
 *
 * Welcome to Fendy folks, this file is where everything comes toegether and
 * more importantly, this is the file that you'll want to output as a nice,
 * minified css file to add in your HTML. But before that, there's some info
 * you might need to understand about how Fendy works like it's architecture,
 * naming convention and other things so if you haven't checked thouse out or
 * want to know more about it I recommend you to take a look to the wiki.
 *
 *
 * CONTENTS
 * ----------------
 * 1. Settings    -> Variables, fonts...
 * 2. Tools       -> Functions, mixins...
 * 3. Generic     -> Resets, vendors...
 * 4. Elements    -> HTML elements...
 * 5. Objects     -> Common patterns...
 * 6. Components  -> UI components...
 * 7. Utilities   -> Utility classes, helpers...
 */
/**
 *  =============================================
 *  #SETTINGS
 *  =============================================
 */
/**
 * ==============================================
 * Colors
 * ==============================================
 *
 * This file contains all colors used accross the project.
 *
 * Fendy Framework approaches color management through descriptive AND
 * functional variables to give you more flexibility.
 */
/**
 * Descriptive color variables.
 *
 * The idea here is to declare every color you may use with a descriptive
 * name. So instead of tying the color to a specific function, you can
 * reuse them however you like.
 *
 * @access private
 * @type Map
 */
/**
 * Functional color variables.
 * Defines the brand-specific colors to be available throughout the
 * project.
 *
 * @access private
 * @type Map
 */
/**
* Functional variable
* Defines the color to use in the body element.
*
* @access public
* @type Color
*/
/**
 * Functional variable
 * Defines the color to use to denote importance of content
 * or availability of interactivity.
 *
 * @access public
 * @type Color
 */
/**
 * Functional variable
 * Defines the color to use in headers
 *
 * @access public
 * @type Color
 */
/**
 * ==============================================
 * Fonts
 * ==============================================
 *
 * This file contains all font declarations, wheter using
 * font-face of external resources like Google Fonts. Rather than
 * 'assigning roles' to fonts, this is the place where you assign
 * them to variables to be used across the project.
 */
/**
 * Default system fonts for common operating systems
 *
 * This fonts match the client's OS resulting in a more
 * adaptable and coherent experience.
 *
 * @access public
 * @type List
 */
/**
 * Defines all the font families shortcuts available for the project
 *
 * The fonts defined here will serve to create the font utilities (See
 * <utilities/_fonts.scss>)
 *
 * @access public
 * @type Map
 */
@import url("https://fonts.googleapis.com/css?family=Playfair+Display:400i|Source+Sans+Pro:400,700,900");
/**
 * ==============================================
 * Variables
 * ==============================================
 *
 * This file contains all settings variables that can be modified
 * accordingly to the projects needs.
 *
 * CONTENTS
 * ----------------
 * 1. Typography
 * 2. Responsive
 * 3. Grid
 */
/**
 * =============================================
 * #TYPOGRAPHY
 * =============================================
 */
/**
 * Settings for font styling
 * Used in 'body' selector to apply to the whole document
 *
 * NOT EXTENDABLE: If new values are added these won't be applied to the 'body'
 * selector
 *
 * @access public
 * @type Map
 */
/**
 * Typography sizes used across the project
 * Predefined sizes corresponding to the project design guideline
 *
 * NOT EXTENDABLE: If new values are added there won't be classes binded to
 * them, these need to be created manually in TRUMPS
 *
 * @access private
 * @type Map
 */
/**
 * Base duration to use with animations
 *
 * @access public
 * @type Number
 */
/**
 * =============================================
 * #RESPONSIVE
 * =============================================
 */
/**
* Common breakpoints definition.
*
* Think of these as a bank for breakpoints you may want to use.
*
* EXTENDABLE: You can add or remove values to this map.
*
* @access private
* @type Map
*/
/**
* Defines key breakpoints used for responsive utilities.
*
* These will create the @<breakpoint> utility for use across the project
* for example, they will be used for the width utility that serves the
* grid object.
*
* DEPENDENCY: Each value is related to a key in $fendy-breakpoints-reference
*
* EXTENDABLE: You can add or remove values to this map.
*
* @access private
* @type Map
*/
/**
 * Defines base media type to use in case none is provided to media queries.
 *
 * @access private
 * @type String | List
 */
/**
 * =============================================
 * #GRID
 * =============================================
 */
/**
 * Number of columns to use for the grid system.
 *
 * This will define the width utility classes that serve as modifiers
 * for the grid child element.
 *
 * @access private
 * @type Number
 */
/**
*  =============================================
*  #TOOLS
*  =============================================
*/
/**
 * ==============================================
 * Color mixin and functions
 * ==============================================
 *
 * This file contains mixins and functions useful for color operations
 */
/**
 * By default Fendy Framework uses both the $color-scheme and
 * $color-brand-scheme maps as color source.
 * You can change this to whatever source you want to be able to
 * use the get-color function.
 *
 * @access private
 * @require $color-scheme
 * @require $color-brand-scheme
 * @type Map
 */
/**
 * Darken color for hover effect
 * Given a base color, returns the same color with the lightness
 * decreased by the default darkening amount
 *
 * @param  Color $base The color to darken
 * @access public
 * @return Color       The base color darkened
 */
/**
 * Returns a color expected to be present in the color source.
 *
 * @param $key: string.  Key of requested value
 * @access public
 * @require $fendy-color-source
 * @return Color
 */
/**
 * ==============================================
 * Fonts mixins and functions
 * ==============================================
 *
 * This file contains mixins and functions useful for
 * fonts operations
 */
/**
 * Returns font family expected to be present in the fonts map.
 *
 * @access public
 * @require $font-families
 * @return String | List
 */
/**
 * ==============================================
 * Responsive Tools
 * ==============================================
 *
 * This file contains mixins and functions useful for handling breakpoints and
 * media queries for responsive functionality.
 *
 * DEPENDENCIES:
 * $fendy-breakpoints-reference       {map}           from 'settings/options'
 * $fendy-base-media-query-type       {string|list}   from 'settings/options'
 * $fendy-breakpoints                 {map}           from 'settings/options'
 */
/**
 * Lookup for a given breakpoint in the Fendy breakpoints reference variable.
 *
 * @param String  $key  -   The name of the breakpoint to llok for.
 * @access public
 * @require $fendy-breakpoints-reference
 * @return Number | List
 */
/**
 * Handle media queries content blocks.
 *
 * The content block included in the declaration will be scoped to the
 * constructed media query.
 *
 * @param String  $breakpoint   -   Name of the breakpoint to respond to
 * @param List    $media-type   -   Media types to respond to
 * @require $fendy-base-media-query-type
 * @require $fendy-breakpoints-reference
 * @content List of rules to be applied at breakpoint
 */
/**
 * Generates responsive classes for a given content block.
 *
 * Handles the respetitive task of declaring responsive classes for the same
 * set of rules. Creactes a responsive class for each breakpoint defined in
 * $fendy-breakpoints
 *
 * @param List | String  $media-type    -   Media queries to create
 *                                          resposive classes for
 * @require $fendy-base-media-query-type
 * @require $fendy-breakpoints
 * @content List of rules to be applied at each media query breakpoint
 */
/**
 * ==============================================
 * Typography Mixins and Functions
 * ==============================================
 *
 * This file contains mixins and functions useful for typography
 */
/**
 * Calculates the equivalent em unit from a given pixel unit.
 *
 * @param Number  pixel   -   Pixel unit number
 * @require $base-font-settings
 * @return Number
 */
/**
 * Get an 'em' font size from the previously defined key in the typography
 * sizes map.
 *
 * @require Function calc-em()
 * @return Number
 */
/**
*  ==============================================
*  #GENERIC
*  ==============================================
*/
/*! normalize.css v7.0.0 | MIT License | github.com/necolas/normalize.css */
/* Document
   ========================================================================== */
/**
 * 1. Correct the line height in all browsers.
 * 2. Prevent adjustments of font size after orientation changes in
 *    IE on Windows Phone and in iOS.
 */
html {
  line-height: 1.15;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */
}

/* Sections
   ========================================================================== */
/**
 * Remove the margin in all browsers (opinionated).
 */
body {
  margin: 0;
}

/**
 * Add the correct display in IE 9-.
 */
article,
aside,
footer,
header,
nav,
section {
  display: block;
}

/**
 * Correct the font size and margin on `h1` elements within `section` and
 * `article` contexts in Chrome, Firefox, and Safari.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0;
}

/* Grouping content
   ========================================================================== */
/**
 * Add the correct display in IE 9-.
 * 1. Add the correct display in IE.
 */
figcaption,
figure,
main {
  /* 1 */
  display: block;
}

/**
 * Add the correct margin in IE 8.
 */
figure {
  margin: 1em 40px;
}

/**
 * 1. Add the correct box sizing in Firefox.
 * 2. Show the overflow in Edge and IE.
 */
hr {
  -webkit-box-sizing: content-box;
          box-sizing: content-box;
  /* 1 */
  height: 0;
  /* 1 */
  overflow: visible;
  /* 2 */
}

/**
 * 1. Correct the inheritance and scaling of font size in all browsers.
 * 2. Correct the odd `em` font sizing in all browsers.
 */
pre {
  font-family: monospace, monospace;
  /* 1 */
  font-size: 1em;
  /* 2 */
}

/* Text-level semantics
   ========================================================================== */
/**
 * 1. Remove the gray background on active links in IE 10.
 * 2. Remove gaps in links underline in iOS 8+ and Safari 8+.
 */
a {
  background-color: transparent;
  /* 1 */
  -webkit-text-decoration-skip: objects;
  /* 2 */
}

/**
 * 1. Remove the bottom border in Chrome 57- and Firefox 39-.
 * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.
 */
abbr[title] {
  border-bottom: none;
  /* 1 */
  text-decoration: underline;
  /* 2 */
  -webkit-text-decoration: underline dotted;
          text-decoration: underline dotted;
  /* 2 */
}

/**
 * Prevent the duplicate application of `bolder` by the next rule in Safari 6.
 */
b,
strong {
  font-weight: inherit;
}

/**
 * Add the correct font weight in Chrome, Edge, and Safari.
 */
b,
strong {
  font-weight: bolder;
}

/**
 * 1. Correct the inheritance and scaling of font size in all browsers.
 * 2. Correct the odd `em` font sizing in all browsers.
 */
code,
kbd,
samp {
  font-family: monospace, monospace;
  /* 1 */
  font-size: 1em;
  /* 2 */
}

/**
 * Add the correct font style in Android 4.3-.
 */
dfn {
  font-style: italic;
}

/**
 * Add the correct background and color in IE 9-.
 */
mark {
  background-color: #ff0;
  color: #000;
}

/**
 * Add the correct font size in all browsers.
 */
small {
  font-size: 80%;
}

/**
 * Prevent `sub` and `sup` elements from affecting the line height in
 * all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}

sub {
  bottom: -0.25em;
}

sup {
  top: -0.5em;
}

/* Embedded content
   ========================================================================== */
/**
 * Add the correct display in IE 9-.
 */
audio,
video {
  display: inline-block;
}

/**
 * Add the correct display in iOS 4-7.
 */
audio:not([controls]) {
  display: none;
  height: 0;
}

/**
 * Remove the border on images inside links in IE 10-.
 */
img {
  border-style: none;
}

/**
 * Hide the overflow in IE.
 */
svg:not(:root) {
  overflow: hidden;
}

/* Forms
   ========================================================================== */
/**
 * 1. Change the font styles in all browsers (opinionated).
 * 2. Remove the margin in Firefox and Safari.
 */
button,
input,
optgroup,
select,
textarea {
  font-family: sans-serif;
  /* 1 */
  font-size: 100%;
  /* 1 */
  line-height: 1.15;
  /* 1 */
  margin: 0;
  /* 2 */
}

/**
 * Show the overflow in IE.
 * 1. Show the overflow in Edge.
 */
button,
input {
  /* 1 */
  overflow: visible;
}

/**
 * Remove the inheritance of text transform in Edge, Firefox, and IE.
 * 1. Remove the inheritance of text transform in Firefox.
 */
button,
select {
  /* 1 */
  text-transform: none;
}

/**
 * 1. Prevent a WebKit bug where (2) destroys native `audio` and `video`
 *    controls in Android 4.
 * 2. Correct the inability to style clickable types in iOS and Safari.
 */
button,
html [type="button"],
[type="reset"],
[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
}

/**
 * Remove the inner border and padding in Firefox.
 */
button::-moz-focus-inner,
[type="button"]::-moz-focus-inner,
[type="reset"]::-moz-focus-inner,
[type="submit"]::-moz-focus-inner {
  border-style: none;
  padding: 0;
}

/**
 * Restore the focus styles unset by the previous rule.
 */
button:-moz-focusring,
[type="button"]:-moz-focusring,
[type="reset"]:-moz-focusring,
[type="submit"]:-moz-focusring {
  outline: 1px dotted ButtonText;
}

/**
 * Correct the padding in Firefox.
 */
fieldset {
  padding: 0.35em 0.75em 0.625em;
}

/**
 * 1. Correct the text wrapping in Edge and IE.
 * 2. Correct the color inheritance from `fieldset` elements in IE.
 * 3. Remove the padding so developers are not caught out when they zero out
 *    `fieldset` elements in all browsers.
 */
legend {
  -webkit-box-sizing: border-box;
          box-sizing: border-box;
  /* 1 */
  color: inherit;
  /* 2 */
  display: table;
  /* 1 */
  max-width: 100%;
  /* 1 */
  padding: 0;
  /* 3 */
  white-space: normal;
  /* 1 */
}

/**
 * 1. Add the correct display in IE 9-.
 * 2. Add the correct vertical alignment in Chrome, Firefox, and Opera.
 */
progress {
  display: inline-block;
  /* 1 */
  vertical-align: baseline;
  /* 2 */
}

/**
 * Remove the default vertical scrollbar in IE.
 */
textarea {
  overflow: auto;
}

/**
 * 1. Add the correct box sizing in IE 10-.
 * 2. Remove the padding in IE 10-.
 */
[type="checkbox"],
[type="radio"] {
  -webkit-box-sizing: border-box;
          box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */
}

/**
 * Correct the cursor style of increment and decrement buttons in Chrome.
 */
[type="number"]::-webkit-inner-spin-button,
[type="number"]::-webkit-outer-spin-button {
  height: auto;
}

/**
 * 1. Correct the odd appearance in Chrome and Safari.
 * 2. Correct the outline style in Safari.
 */
[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  outline-offset: -2px;
  /* 2 */
}

/**
 * Remove the inner padding and cancel buttons in Chrome and Safari on macOS.
 */
[type="search"]::-webkit-search-cancel-button,
[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none;
}

/**
 * 1. Correct the inability to style clickable types in iOS and Safari.
 * 2. Change font properties to `inherit` in Safari.
 */
::-webkit-file-upload-button {
  -webkit-appearance: button;
  /* 1 */
  font: inherit;
  /* 2 */
}

/* Interactive
   ========================================================================== */
/*
 * Add the correct display in IE 9-.
 * 1. Add the correct display in Edge, IE, and Firefox.
 */
details,
menu {
  display: block;
}

/*
 * Add the correct display in all browsers.
 */
summary {
  display: list-item;
}

/* Scripting
   ========================================================================== */
/**
 * Add the correct display in IE 9-.
 */
canvas {
  display: inline-block;
}

/**
 * Add the correct display in IE.
 */
template {
  display: none;
}

/* Hidden
   ========================================================================== */
/**
 * Add the correct display in IE 10-.
 */
[hidden] {
  display: none;
}

/**
 * ==============================================
 * Global resets
 * ==============================================
 *
 * This file contains base reset rules
 */
/**
 * Resets for html
 *
 * 1) Occupy all vertical available space
 * 2) Avoid horizontal scroll
 */
html {
  width: 100%;
  height: auto;
  min-height: 100%;
  /* [1] */
  overflow-x: hidden;
  /* [2] */
  font-size: 100%;
  font-family: sans-serif;
}

/**
 * Resets for body
 *
 * 1) Occupy all vertical available space
 */
body {
  margin: 0;
  width: 100%;
  height: auto;
  min-height: 100%;
  /* [1] */
}

/**
 * Remove default user agent margin in block level elements
 */
h1, h2, h3, h4, h5, h6,
p,
figure,
hr,
pre {
  margin: 0;
}

/**
 * Resets default user agent style for lists
 *
 * 1) Make list item markers appear inside content flow
 * 2) Reset list item marker type to modify them later
 */
dl, ol, ul {
  margin: 0;
  padding: 0;
  list-style-position: inside;
  /* [1] */
  list-style-type: initial;
  /* [2] */
}

/**
 * Resets default user agent style for links
 */
a {
  display: inline-block;
  color: #000000;
  text-decoration: none;
  cursor: pointer;
  font-size: inherit;
}

/**
 * Enforce these on every browser
 */
b, strong {
  font-weight: 700;
}

i, em, dfn {
  font-style: italic;
}

del, s {
  text-decoration: line-through;
}

u {
  text-decoration: underline;
}

/**
 * Resets the default user agent style for form related elements
 *
 * 1) Remove user agent appearance (chevrons and gradients)
 */
/* stylelint-disable selector-no-qualifying-type */
button,
input,
select,
textarea {
  padding: 0;
  border: 0;
  background-color: transparent;
  font-size: inherit;
  color: inherit;
  cursor: pointer;
}

input[type='text'], input[type='password'],
input[type='date'], input[type='datetime-local'],
input[type='email'], input[type='month'],
input[type='number'], input[type='search'],
input[type='tel'], input[type='time'],
input[type='url'], input[type='week'],
textarea {
  cursor: text;
}

input[type='file'] {
  cursor: pointer;
}

/* stylelint-enable */
meter, progress {
  width: 100%;
  vertical-align: middle;
  -webkit-appearance: none;
     -moz-appearance: none;
          appearance: none;
}

select {
  display: inline-block;
  outline: none;
  vertical-align: middle;
  -webkit-appearance: none;
     -moz-appearance: none;
          appearance: none;
  /* [1] */
}

textarea {
  width: 100%;
  resize: none;
}

/**
 * Resets the default user agent style for focus
 */
a:focus,
button:focus,
input:focus,
textarea:focus,
select:focus {
  outline: none;
}

/**
 * Resets the default user agent style for tables
 */
table {
  border-collapse: collapse;
  border-spacing: 0;
  padding: 0;
}

th, td {
  padding: 0;
}

/**
 * Prevent overflowing content
 */
img, embed,
object, video {
  max-width: 100%;
}

/**
 * ==============================================
 * Base Styiling
 * ==============================================
 *
 * This file contains base styling for the whole document
 */
/**
 * Define flexible box sizing
 * More on http://bit.ly/1A91I0J
 */
html {
  -webkit-box-sizing: border-box;
          box-sizing: border-box;
}

/* stylelint-disable selector-max-universal */
*, *::before, *::after {
  -webkit-box-sizing: inherit;
          box-sizing: inherit;
}

/* stylelint-enable */
/**
* Presets for body
*
* 1) Emphasize legibility over rendering speed and geometric precision
* 2) Smooth the font on the level of the pixel
* 3) Render text with grayscale antialiasing
*/
body {
  /* stylelint-disable */
  font: normal 400 16px / 1.6 "Source Sans Pro", sans-serif;
  /* stylelint-enable */
  color: rgba(0, 0, 0, 0.87);
  text-rendering: optimizeLegibility;
  /* [1] */
  -webkit-font-smoothing: antialiased;
  /* [2] */
  -moz-osx-font-smoothing: grayscale;
  /* [3] */
  font-smoothing: antialiased;
  /* stylelint-disable */
}

/**
*  ==============================================
*  #Elements
*  ==============================================
*/
/**
 * ==============================================
 * Header Element Styling
 * ==============================================
 *
 * This file contains styling for elements h1 through h6
 */
/**
* Bottom margin for headers
* Declares base margin bottom to use in headers
*
* @type Number
*/
/**
 * Settings for headers styling
 * Defines properties to use in headers
 *
 *
 * EXTENDABLE: New values for each header will be added to the corresponding
 * header selector
 *
 * @require Function calc-em()
 * @type Map
 */
/**
 * Set default styles for headers
 */
h1, h2,
h3, h4,
h5, h6 {
  font-weight: 700;
}

/**
 * Configure h1-h6 with header settings defined in Variables
 */
h1 {
  font-size: 2.25em;
  line-height: 1.1;
  margin-bottom: 1rem;
  color: rgba(0, 0, 0, 0.87);
}

h2 {
  font-size: 1.875em;
  line-height: 1.1;
  margin-bottom: 1rem;
  color: rgba(0, 0, 0, 0.87);
}

h3 {
  font-size: 1.5em;
  line-height: 1.3;
  margin-bottom: 1rem;
  color: rgba(0, 0, 0, 0.87);
}

h4 {
  font-size: 1.25em;
  line-height: 1.3;
  margin-bottom: 1rem;
  color: rgba(0, 0, 0, 0.87);
}

h5 {
  font-size: 1.125em;
  line-height: 1.6;
  margin-bottom: 1rem;
  color: rgba(0, 0, 0, 0.87);
}

h6 {
  font-size: 1em;
  line-height: 1.6;
  margin-bottom: 1rem;
  color: rgba(0, 0, 0, 0.87);
}

/**
 * Set default styles for subheaders
 * A subheader is represented by a 'small' tag inside of any header tag
 *
 * Expample:
 * <h1>Header <small>Subheader</small></h1>
 */
h1 small, h2 small,
h3 small, h4 small,
h5 small, h6 small {
  font-weight: 500;
  font-size: 65%;
  vertical-align: baseline;
}

/**
 * ==============================================
 * Text Content Styling
 * ==============================================
 *
 * This file contains styling for text content elements
 * Mozilla defines text content as elements to organize blocks or sections of
 * content. See more at:
 * (https://developer.mozilla.org/en-US/docs/Web/HTML/Element#Text_content)
 *
 * CONTENTS
 * ----------------
 * 1. Paragraphs
 * 2. Bloquotes
 * 3. Lists (dl, ol, ul)
 * 4. Figure and figcaption
 * 5. Horizontal rule
 * 6. Preformatted text
 *
 * @require Function font-size()
 */
/**
* Margin bottom for paragraphs
*
* @type Number
*/
/**
 * Default background color for preformatted text and/or code
 *
 * @type Color
 */
/**
 * Sets default style for paragraphs
 */
p {
  font-size: inherit;
  margin-bottom: 1rem;
}

/**
 * Sets default style for bloquotes
 * In order to keep the element from modifying the space around it and to
 * avoid conflicting styles with users layout the margin isn't modify and
 * instead the user agent rules for it are preserved
 */
blockquote {
  border-left: 5px solid #0069ff;
  padding: 0.5rem 2rem;
}

blockquote p {
  font-size: 1em;
  font-weight: 200;
}

/**
 * Sets default style for definition lists
 *
 * 1) Remove list item marker
 * 2) Give some space between dt dd pairs
 */
dl {
  list-style-type: none;
  /* [1] */
}

dl dt {
  font-weight: 700;
}

dl dt:not(:first-child) {
  margin-top: 1rem;
  /* [2] */
}

dl dd {
  margin: 0;
}

/**
 * Sets default style for ordered lists
 *
 * 1) By default ordered list item markers are numbers
 * 2) Set indentation for nested lists
 * 3) Change marker of second level nested list to upper latin (A, B, ...)
 * 4) Change marker of third level nested list to lowe latin (a, b, ...)
 */
ol {
  list-style-type: decimal;
  /* [1] */
}

ol > ol {
  padding-left: 1.5em;
  /* [2] */
  list-style-type: upper-latin;
  /* [3] */
}

ol > ol > ol {
  list-style-type: lower-latin;
  /* [4] */
}

/**
 * Sets default style for unordered lists
 *
 * 1) Set indentation for nested lists
 * 2) Change marker of second level nested list to upper latin (A, B, ...)
 * 3) Change marker of third level nested list to lowe latin (a, b, ...)
 */
ul {
  list-style-type: disc;
}

ul > ul {
  padding-left: 1.5em;
  /* [1] */
  list-style-type: circle;
  /* [2] */
}

ul > ul > ul {
  list-style-type: square;
  /* [3] */
}

/**
 * Sets default styling for figure and figure caption elements
 * By default figure occupies the whole width of it's container and
 * is only provided with a margin bottom to separate content
 */
figure {
  margin-bottom: 1em;
}

figure figcaption {
  font-style: italic;
  font-weight: 100;
  font-size: 0.875em;
  text-align: center;
}

/**
 * Sets default styling for horizontal rule
 */
hr {
  border-color: rgba(0, 0, 0, 0.12);
  margin: 1em 0;
}

/**
 * Sets default styling for preformatted text
 * By default occupies the whole with of it's container and
 * uses the base default color as background
 */
pre {
  display: block;
  padding: 1.2rem;
  margin-bottom: 1em;
  font-size: 0.875em;
  background-color: #efefef;
}

/**
 * ==============================================
 * Text Level Semantics Styling
 * ==============================================
 *
 * This file contains styling for text level elements
 */
/**
 * Sets default style for links
 * Includes styles for visited, hover and active states
 */
a {
  color: #0069ff;
  -webkit-transition: color 0.3s;
  transition: color 0.3s;
}

a:visited {
  color: #cce1ff;
}

a:hover, a:active {
  color: #003f99;
}

/**
 * Sets default style for abbreviations
 *
 * 1) Sets cursor to question mark
 */
abbr {
  display: inline-block;
  cursor: help;
  /* [1] */
}

/**
 * Sets default style for cite element
 */
cite {
  font-style: italic;
  font-weight: 100;
}

cite::before {
  content: '―';
  margin-right: 5px;
}

/**
 * Sets default style for code, keyboard input and sample output
 */
code,
kbd,
samp {
  display: inline-block;
  padding: 0.1em 0.5em;
  margin: 0 3px;
  -webkit-box-shadow: 0 0 0 1px #e1e1e1;
          box-shadow: 0 0 0 1px #e1e1e1;
  border-radius: 3px;
  font-size: 0.875em;
}

/**
 * Sets default style for code that is wrapped inside a preformatted tag
 *
 * @type Number
 */
pre code {
  padding: 0;
  border: 0;
  width: 100%;
  -webkit-box-shadow: none;
          box-shadow: none;
  margin: 0;
}

/**
 * Sets default style for mark element
 */
mark {
  position: relative;
  display: inline-block;
  color: inherit;
  background-color: transparent;
}

mark::before {
  content: '';
  z-index: -1;
  position: absolute;
  top: 50%;
  left: 50%;
  width: 110%;
  height: 40%;
  -webkit-transform: translate(-50%, -50%);
          transform: translate(-50%, -50%);
  background-color: rgba(0, 105, 255, 0.53);
  border-radius: 1rem;
}

/**
 * Sets default style for inline quotes
 */
q {
  font-style: italic;
}

/**
 * Sets default style for small element
 */
small {
  font-size: 0.75em;
}

sub {
  font-size: 0.75em;
  vertical-align: text-bottom;
  bottom: initial;
}

sup {
  font-size: 0.75em;
  vertical-align: text-top;
  top: initial;
}

/**
 *  =============================================
 *  #OBJECTS
 *  =============================================
 */
/**
 * ==============================================
 * Grid
 * ==============================================
 *
 * This file contains Fendys flex-based grid system.
 *
 * This grid can be used to create complex layouts on your website
 * however, at the time of writting, CSS Grid has fairly good support
 * among modern browsers so you may want to use that for laying out
 * components and this grid to layout the insides of those components.
 *
 * This file contains the definition of the grid and it's children among
 * with many modifiers to adapt the grid tou your desired layout however
 * you need to use the width utilities for sizing the grid children.
 *
 * Use example:
 *
 * <div class="o-grid">
 *  <div class="o-grid__child u-6of12"></div>
 *  <div class="o-grid__child u-6of12"></div>
 * </div>
 *
 * The above snippet will create a two equal-width columns layout assuming
 * you opt to use a 12-column grid and use the quantity-of style instead of
 * the fraction-like nomenclature for width utility (See utilities/widths).
 *
 * Most of the times you'll need to design responsive layouts. The widths
 * utility includes BEMIT responsive suffixes to that puropose, here's
 * an example:
 *
 * <div class="o-grid">
 *  <div class="o-grid__child u-6of12 u-4of12@desktop"></div>
 *  <div class="o-grid__child u-6of12 u-8of12@desktop"></div>
 * </div>
 *
 * The above snippet will create a two equal-width columns layout at mobile
 * devices-like width and ad desktop-like width it'll change to a 4 columns-
 * width and an 8 columns-width layout assuming you opt to use the default
 * breakpoint names (See utilities/responsive).
 *
 * CONTENTS:
 * 1. Options
 * 2. Container
 * 3. Children
 */
/**
* ==============================================
* #OPTIONS
* ==============================================
*/
/* 6px on each side */
/**
 * ==============================================
 * #CONTAINER
 * ==============================================
 */
/**
 * The base grid container object.
 *
 * By default the grid children are organized horizontally (row)
 */
.o-grid {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-orient: horizontal;
  -webkit-box-direction: normal;
      -ms-flex-flow: row wrap;
          flex-flow: row wrap;
}

.o-grid.o-grid-reverse {
  -webkit-box-orient: horizontal;
  -webkit-box-direction: reverse;
      -ms-flex-direction: row-reverse;
          flex-direction: row-reverse;
}

/**
 * A modification of the grid object.
 *
 * Sets the grid children organization to be vertical (column)
 */
.o-grid--vertical {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-orient: vertical;
  -webkit-box-direction: normal;
      -ms-flex-flow: column wrap;
          flex-flow: column wrap;
}

.o-grid--vertical.o-grid-reverse {
  -webkit-box-orient: vertical;
  -webkit-box-direction: reverse;
      -ms-flex-direction: column-reverse;
          flex-direction: column-reverse;
}

/**
 * Modifications for the alignment of children inside the grid container
 * at containers axis.
 *
 * There is no actual block to modify here, the naming rather works as a
 * <property-of-the-block>--<modifier>.
 * Every possible value is included to take into account the possibility
 * of having a different base option defined.
 */
.o-grid-axis-child-align--start {
  -webkit-box-pack: start;
      -ms-flex-pack: start;
          justify-content: flex-start;
}

.o-grid-axis-child-align--end {
  -webkit-box-pack: end;
      -ms-flex-pack: end;
          justify-content: flex-end;
}

.o-grid-axis-child-align--center {
  -webkit-box-pack: center;
      -ms-flex-pack: center;
          justify-content: center;
}

.o-grid-axis-child-align--between {
  -webkit-box-pack: justify;
      -ms-flex-pack: justify;
          justify-content: space-between;
}

.o-grid-axis-child-align--around {
  -ms-flex-pack: distribute;
      justify-content: space-around;
}

/**
 * Modifications for the alignment of children inside the grid container
 * at containers cross-axis.
 *
 * There is no actual block to modify here, the naming rather works as a
 * <property-of-the-block>--<modifier>.
 * Every possible value is included to take into account the possibility
 * of having a different base option defined.
 */
.o-grid-cross-child-align--start {
  -webkit-box-align: start;
      -ms-flex-align: start;
          align-items: flex-start;
}

.o-grid-cross-child-align--end {
  -webkit-box-align: end;
      -ms-flex-align: end;
          align-items: flex-end;
}

.o-grid-cross-child-align--center {
  -webkit-box-align: center;
      -ms-flex-align: center;
          align-items: center;
}

.o-grid-cross-child-align--stretch {
  -webkit-box-align: stretch;
      -ms-flex-align: stretch;
          align-items: stretch;
}

.o-grid-cross-child-align--baseline {
  -webkit-box-align: baseline;
      -ms-flex-align: baseline;
          align-items: baseline;
}

/**
 * Modifications for the alignment of content inside the grid container.
 *
 * There is no actual block to modify here, the naming rather works as a
 * <property-of-the-block>--<modifier>.
 * Every possible value is included to take into account the possibility
 * of having a different base option defined.
 */
.o-grid-content-align--start {
  -ms-flex-line-pack: start;
      align-content: flex-start;
}

.o-grid-content-align--end {
  -ms-flex-line-pack: end;
      align-content: flex-end;
}

.o-grid-content-align--center {
  -ms-flex-line-pack: center;
      align-content: center;
}

.o-grid-content-align--stretch {
  -ms-flex-line-pack: stretch;
      align-content: stretch;
}

.o-grid-content-align--between {
  -ms-flex-line-pack: justify;
      align-content: space-between;
}

.o-grid-content-align--around {
  -ms-flex-line-pack: distribute;
      align-content: space-around;
}

/**
 * ==============================================
 * #CHILDREN
 * ==============================================
 */
.o-grid__child,
.o-grid__child[class*='--'] {
  -webkit-box-flex: 0;
      -ms-flex: 0 1 auto;
          flex: 0 1 auto;
  padding-left: 6px;
  padding-right: 6px;
}

/**
 * Defines a modification of the grid child element that adjust's it's size
 * automatically to accupie the available space.
 *
 * Usefull when you need to give children the same size inside the grid.
 * Works for horizontal (default) and vertical grids.
 */
.o-grid__child--auto {
  -webkit-box-flex: 1;
      -ms-flex-positive: 1;
          flex-grow: 1;
}

/**
 * Modifications for the self alignment of grid children.
 *
 * There is no actual block to modify here, the naming rather works as a
 * <property-of-the-block>--<modifier>.
 * Every possible value is included to take into account the possibility
 * of having a different base option defined.
 */
.o-grid-align-self--start {
  -ms-flex-item-align: start;
      align-self: flex-start;
}

.o-grid-align-self--end {
  -ms-flex-item-align: start;
      align-self: flex-start;
}

.o-grid-align-self--center {
  -ms-flex-item-align: center;
      align-self: center;
}

.o-grid-align-self--baseline {
  -ms-flex-item-align: baseline;
      align-self: baseline;
}

.o-grid-align-self--stretch {
  -ms-flex-item-align: stretch;
      align-self: stretch;
}

/**
 * ==============================================
 * Wrapper
 * ==============================================
 *
 * This file contains styles for wrapping content.
 *
 * The wrapper object serves as a container to keep content in-flow with the
 * layout.
 */
/**
 * Creates a mobile-first wrapper that becomes static at the max-width.
 *
 * Includes responsive classes that limt the size of the wrapper at breakpoints.
 */
.o-wrapper {
  width: 90%;
  max-width: 1280px;
  margin: 0 auto;
  /**
   * Check if the breakpoint map is defined
   */
  /**
       * For every breakpoint, define responsive class for given rules
       * (content) inside it's corresponding media query.
       */
  /**
   * Check if breakpoints are provided.
   *
   * There may be cases where you only want to target media types, not a
   * specific breakpoint for example, when using the print media query.
   */
  /**
     * Check if the Fendy breakpoint reference has the given breakpoint defined.
     */
  /**
       * For every breakpoint, define responsive class for given rules
       * (content) inside it's corresponding media query.
       */
  /**
   * Check if breakpoints are provided.
   *
   * There may be cases where you only want to target media types, not a
   * specific breakpoint for example, when using the print media query.
   */
  /**
     * Check if the Fendy breakpoint reference has the given breakpoint defined.
     */
}

/**
 * Creates a modification of the wrapper object that occupies the whole
 * available width.
 *
 * Includes responsive classes that limt the size of the wrapper at breakpoints.
 */
.o-wrapper--full {
  width: 100%;
  margin: 0;
  /**
   * Check if the breakpoint map is defined
   */
  /**
       * For every breakpoint, define responsive class for given rules
       * (content) inside it's corresponding media query.
       */
  /**
   * Check if breakpoints are provided.
   *
   * There may be cases where you only want to target media types, not a
   * specific breakpoint for example, when using the print media query.
   */
  /**
     * Check if the Fendy breakpoint reference has the given breakpoint defined.
     */
  /**
       * For every breakpoint, define responsive class for given rules
       * (content) inside it's corresponding media query.
       */
  /**
   * Check if breakpoints are provided.
   *
   * There may be cases where you only want to target media types, not a
   * specific breakpoint for example, when using the print media query.
   */
  /**
     * Check if the Fendy breakpoint reference has the given breakpoint defined.
     */
}

.o-logo {
  color: #ffffff;
  font-size: 1.25em;
  font-weight: 900;
}

.o-link {
  color: #ffffff;
  font-size: 1.25em;
  font-weight: 900;
}

.o-link:hover {
  color: #ffffff;
}

.o-link:visited {
  color: #ffffff;
}

/**
*  =============================================
*  #COMPONENTS
*  =============================================
*/
.c-site {
  width: 100vw;
  min-height: 100vh;
}

.c-site__hero {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100vh;
  background: url("../assets/background.png") 50% 50% no-repeat;
  background-size: cover;
}

.c-site__hero::after {
  content: '';
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  background: url("../assets/confetti.svg") 0 100% no-repeat;
  background-size: cover;
  z-index: 1;
  /**
   * Check if breakpoints are provided.
   *
   * There may be cases where you only want to target media types, not a
   * specific breakpoint for example, when using the print media query.
   */
  /**
     * Check if the Fendy breakpoint reference has the given breakpoint defined.
     */
}

.c-hero__nav {
  padding: 1rem 2rem !important;
  z-index: 2;
}

.c-hero__copy {
  height: 60vh;
  z-index: 2;
}

.o-hero-title {
  color: #ffffff;
  font-size: 4em;
  padding-right: 1rem;
}

.o-hero-text {
  color: #ffffff;
  padding-left: 1rem;
}

.c-portfolio {
  position: relative;
  z-index: 5;
  overflow-x: scroll;
  /**
   * Check if breakpoints are provided.
   *
   * There may be cases where you only want to target media types, not a
   * specific breakpoint for example, when using the print media query.
   */
  /**
     * Check if the Fendy breakpoint reference has the given breakpoint defined.
     */
}

.c-portfolio__list {
  position: relative;
  width: 100%;
  top: 25rem;
  padding-bottom: 4%;
  /**
   * Check if breakpoints are provided.
   *
   * There may be cases where you only want to target media types, not a
   * specific breakpoint for example, when using the print media query.
   */
  /**
     * Check if the Fendy breakpoint reference has the given breakpoint defined.
     */
}

.c-portfolio__item,
[class*='c-portfolio__item--'] {
  position: relative;
  width: 90%;
  padding: 0.5rem;
  background-color: #ffffff;
  border-radius: 4px;
  margin: 1rem auto;
  /**
   * Check if breakpoints are provided.
   *
   * There may be cases where you only want to target media types, not a
   * specific breakpoint for example, when using the print media query.
   */
  /**
     * Check if the Fendy breakpoint reference has the given breakpoint defined.
     */
}

.c-portfolio__item a,
[class*='c-portfolio__item--'] a {
  width: 100%;
}

.c-portfolio__item--wip:hover::before {
  content: 'Work in Progress 🙃';
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  background-color: rgba(0, 0, 0, 0.73);
  color: #ffffff;
  text-align: center;
  font-weight: 800;
  font-size: 1.25rem;
  padding-top: 7rem;
}

.o-item-photo {
  width: 100%;
  height: 12em;
  -o-object-fit: cover;
     object-fit: cover;
  border-radius: 4px;
}

.o-item-title {
  padding: 0.5rem 1rem;
  margin: 0;
}

/**
 *  =============================================
 *  #TRUMPS
 *  =============================================
 */
/**
 * ==============================================
 * Border radius utility classes
 * ==============================================
 */
/**
 * Settings for border radius.
 *
 * Defines a map with each value of border radius to use
 * across the project
 *
 * @type Map
 */
.u-radius-s {
  border-radius: 2px;
}

.u-radius-m {
  border-radius: 0.5rem;
}

.u-radius-l {
  border-radius: 2rem;
}

.u-radius-c {
  border-radius: 50%;
}

/**
 * ==============================================
 * Color utilities
 * ==============================================
 *
 * This file contains utility classes for color.
 */
/**
   * Check fr the color brand scheme map
   */
.u-color-primary {
  color: #0069ff;
}

.u-bkg-primary {
  background-color: #0069ff;
}

.u-color-success {
  color: #4fd474;
}

.u-bkg-success {
  background-color: #4fd474;
}

.u-color-warning {
  color: #ffbd2f;
}

.u-bkg-warning {
  background-color: #ffbd2f;
}

.u-color-error {
  color: #f13c3f;
}

.u-bkg-error {
  background-color: #f13c3f;
}

/**
 * ==============================================
 * Display utilities
 * ==============================================
 *
 * This file contains utility classes for displaying content.
 */
/**
 * Display types
 */
.u-block {
  display: block;
  /**
   * Check if the breakpoint map is defined
   */
  /**
       * For every breakpoint, define responsive class for given rules
       * (content) inside it's corresponding media query.
       */
  /**
   * Check if breakpoints are provided.
   *
   * There may be cases where you only want to target media types, not a
   * specific breakpoint for example, when using the print media query.
   */
  /**
     * Check if the Fendy breakpoint reference has the given breakpoint defined.
     */
  /**
       * For every breakpoint, define responsive class for given rules
       * (content) inside it's corresponding media query.
       */
  /**
   * Check if breakpoints are provided.
   *
   * There may be cases where you only want to target media types, not a
   * specific breakpoint for example, when using the print media query.
   */
  /**
     * Check if the Fendy breakpoint reference has the given breakpoint defined.
     */
}

.u-inline {
  display: inline;
  /**
   * Check if the breakpoint map is defined
   */
  /**
       * For every breakpoint, define responsive class for given rules
       * (content) inside it's corresponding media query.
       */
  /**
   * Check if breakpoints are provided.
   *
   * There may be cases where you only want to target media types, not a
   * specific breakpoint for example, when using the print media query.
   */
  /**
     * Check if the Fendy breakpoint reference has the given breakpoint defined.
     */
  /**
       * For every breakpoint, define responsive class for given rules
       * (content) inside it's corresponding media query.
       */
  /**
   * Check if breakpoints are provided.
   *
   * There may be cases where you only want to target media types, not a
   * specific breakpoint for example, when using the print media query.
   */
  /**
     * Check if the Fendy breakpoint reference has the given breakpoint defined.
     */
}

.u-inline-block {
  display: inline-block;
  /**
   * Check if the breakpoint map is defined
   */
  /**
       * For every breakpoint, define responsive class for given rules
       * (content) inside it's corresponding media query.
       */
  /**
   * Check if breakpoints are provided.
   *
   * There may be cases where you only want to target media types, not a
   * specific breakpoint for example, when using the print media query.
   */
  /**
     * Check if the Fendy breakpoint reference has the given breakpoint defined.
     */
  /**
       * For every breakpoint, define responsive class for given rules
       * (content) inside it's corresponding media query.
       */
  /**
   * Check if breakpoints are provided.
   *
   * There may be cases where you only want to target media types, not a
   * specific breakpoint for example, when using the print media query.
   */
  /**
     * Check if the Fendy breakpoint reference has the given breakpoint defined.
     */
}

/**
 * Displaying centered blocks
 */
.u-center {
  display: block;
  margin-left: auto;
  margin-right: auto;
}

.u-center--vertical {
  position: relative;
  top: 50%;
  -webkit-transform: translateY(-50%);
          transform: translateY(-50%);
}

/**
 * Showing/Hiding things
 */
.u-hidden {
  display: none;
  /**
   * Check if the breakpoint map is defined
   */
  /**
       * For every breakpoint, define responsive class for given rules
       * (content) inside it's corresponding media query.
       */
  /**
   * Check if breakpoints are provided.
   *
   * There may be cases where you only want to target media types, not a
   * specific breakpoint for example, when using the print media query.
   */
  /**
     * Check if the Fendy breakpoint reference has the given breakpoint defined.
     */
  /**
       * For every breakpoint, define responsive class for given rules
       * (content) inside it's corresponding media query.
       */
  /**
   * Check if breakpoints are provided.
   *
   * There may be cases where you only want to target media types, not a
   * specific breakpoint for example, when using the print media query.
   */
  /**
     * Check if the Fendy breakpoint reference has the given breakpoint defined.
     */
}

.u-visible {
  visibility: visible;
  /**
   * Check if the breakpoint map is defined
   */
  /**
       * For every breakpoint, define responsive class for given rules
       * (content) inside it's corresponding media query.
       */
  /**
   * Check if breakpoints are provided.
   *
   * There may be cases where you only want to target media types, not a
   * specific breakpoint for example, when using the print media query.
   */
  /**
     * Check if the Fendy breakpoint reference has the given breakpoint defined.
     */
  /**
       * For every breakpoint, define responsive class for given rules
       * (content) inside it's corresponding media query.
       */
  /**
   * Check if breakpoints are provided.
   *
   * There may be cases where you only want to target media types, not a
   * specific breakpoint for example, when using the print media query.
   */
  /**
     * Check if the Fendy breakpoint reference has the given breakpoint defined.
     */
}

.u-invisible {
  visibility: hidden;
  /**
   * Check if the breakpoint map is defined
   */
  /**
       * For every breakpoint, define responsive class for given rules
       * (content) inside it's corresponding media query.
       */
  /**
   * Check if breakpoints are provided.
   *
   * There may be cases where you only want to target media types, not a
   * specific breakpoint for example, when using the print media query.
   */
  /**
     * Check if the Fendy breakpoint reference has the given breakpoint defined.
     */
  /**
       * For every breakpoint, define responsive class for given rules
       * (content) inside it's corresponding media query.
       */
  /**
   * Check if breakpoints are provided.
   *
   * There may be cases where you only want to target media types, not a
   * specific breakpoint for example, when using the print media query.
   */
  /**
     * Check if the Fendy breakpoint reference has the given breakpoint defined.
     */
}

/**
 * ==============================================
 * Font utilities
 * ==============================================
 *
 * This file contains utility classes for font families.
 */
.u-font-default {
  font-family: "Source Sans Pro", sans-serif;
}

.u-font-accent {
  font-family: "Playfair Display", serif;
}

.u-font-system {
  font-family: "-apple-system", "system-ui", "BlinkMacSystemFont", "Segoe UI", "Tahoma", "Roboto", "Oxygen", "Ubuntu", "Cantarell", "Fira Sans", "Droid Sans", "Helvetica Neue", sans-serif;
}

/**
 * ==============================================
 * Padding utility classes
 * ==============================================
 *
 * This file contains utility classes for providing padding to elements.
 *
 * Stripping the padding out of basic elements helps with the
 * 'separation of concerns' approach to design-agnostic architectures.
 */
/**
 * Settings for padding classes.
 *
 * Defines a map with each value of padding to use
 * across the project
 *
 * @type Map
 */
/**
 * Creates utility clases for providing padding to the content box.
 * Includes responsive suffixes.
 */
/**
     * Defines measure of padding for the entire content box
     */
.u-pad-s {
  padding: 0.5rem;
  /**
   * Check if the breakpoint map is defined
   */
  /**
       * For every breakpoint, define responsive class for given rules
       * (content) inside it's corresponding media query.
       */
  /**
   * Check if breakpoints are provided.
   *
   * There may be cases where you only want to target media types, not a
   * specific breakpoint for example, when using the print media query.
   */
  /**
     * Check if the Fendy breakpoint reference has the given breakpoint defined.
     */
  /**
       * For every breakpoint, define responsive class for given rules
       * (content) inside it's corresponding media query.
       */
  /**
   * Check if breakpoints are provided.
   *
   * There may be cases where you only want to target media types, not a
   * specific breakpoint for example, when using the print media query.
   */
  /**
     * Check if the Fendy breakpoint reference has the given breakpoint defined.
     */
}

/**
     * Defines measure of padding for the vertical axis of the
     * content box
     */
.u-pad-s--vertical {
  padding-top: 0.5rem;
  padding-bottom: 0.5rem;
  /**
   * Check if the breakpoint map is defined
   */
  /**
       * For every breakpoint, define responsive class for given rules
       * (content) inside it's corresponding media query.
       */
  /**
   * Check if breakpoints are provided.
   *
   * There may be cases where you only want to target media types, not a
   * specific breakpoint for example, when using the print media query.
   */
  /**
     * Check if the Fendy breakpoint reference has the given breakpoint defined.
     */
  /**
       * For every breakpoint, define responsive class for given rules
       * (content) inside it's corresponding media query.
       */
  /**
   * Check if breakpoints are provided.
   *
   * There may be cases where you only want to target media types, not a
   * specific breakpoint for example, when using the print media query.
   */
  /**
     * Check if the Fendy breakpoint reference has the given breakpoint defined.
     */
}

/**
     * Defines measure of padding for the horizontal axis of
     * the content box
     */
.u-pad-s--horizontal {
  padding-left: 0.5rem;
  padding-right: 0.5rem;
  /**
   * Check if the breakpoint map is defined
   */
  /**
       * For every breakpoint, define responsive class for given rules
       * (content) inside it's corresponding media query.
       */
  /**
   * Check if breakpoints are provided.
   *
   * There may be cases where you only want to target media types, not a
   * specific breakpoint for example, when using the print media query.
   */
  /**
     * Check if the Fendy breakpoint reference has the given breakpoint defined.
     */
  /**
       * For every breakpoint, define responsive class for given rules
       * (content) inside it's corresponding media query.
       */
  /**
   * Check if breakpoints are provided.
   *
   * There may be cases where you only want to target media types, not a
   * specific breakpoint for example, when using the print media query.
   */
  /**
     * Check if the Fendy breakpoint reference has the given breakpoint defined.
     */
}

/**
     * Defines measure of padding for each side of the content box
     */
.u-pad-s--top {
  padding-top: 0.5rem;
  /**
   * Check if the breakpoint map is defined
   */
  /**
       * For every breakpoint, define responsive class for given rules
       * (content) inside it's corresponding media query.
       */
  /**
   * Check if breakpoints are provided.
   *
   * There may be cases where you only want to target media types, not a
   * specific breakpoint for example, when using the print media query.
   */
  /**
     * Check if the Fendy breakpoint reference has the given breakpoint defined.
     */
  /**
       * For every breakpoint, define responsive class for given rules
       * (content) inside it's corresponding media query.
       */
  /**
   * Check if breakpoints are provided.
   *
   * There may be cases where you only want to target media types, not a
   * specific breakpoint for example, when using the print media query.
   */
  /**
     * Check if the Fendy breakpoint reference has the given breakpoint defined.
     */
}

.u-pad-s--right {
  padding-right: 0.5rem;
  /**
   * Check if the breakpoint map is defined
   */
  /**
       * For every breakpoint, define responsive class for given rules
       * (content) inside it's corresponding media query.
       */
  /**
   * Check if breakpoints are provided.
   *
   * There may be cases where you only want to target media types, not a
   * specific breakpoint for example, when using the print media query.
   */
  /**
     * Check if the Fendy breakpoint reference has the given breakpoint defined.
     */
  /**
       * For every breakpoint, define responsive class for given rules
       * (content) inside it's corresponding media query.
       */
  /**
   * Check if breakpoints are provided.
   *
   * There may be cases where you only want to target media types, not a
   * specific breakpoint for example, when using the print media query.
   */
  /**
     * Check if the Fendy breakpoint reference has the given breakpoint defined.
     */
}

.u-pad-s--bottom {
  padding-bottom: 0.5rem;
  /**
   * Check if the breakpoint map is defined
   */
  /**
       * For every breakpoint, define responsive class for given rules
       * (content) inside it's corresponding media query.
       */
  /**
   * Check if breakpoints are provided.
   *
   * There may be cases where you only want to target media types, not a
   * specific breakpoint for example, when using the print media query.
   */
  /**
     * Check if the Fendy breakpoint reference has the given breakpoint defined.
     */
  /**
       * For every breakpoint, define responsive class for given rules
       * (content) inside it's corresponding media query.
       */
  /**
   * Check if breakpoints are provided.
   *
   * There may be cases where you only want to target media types, not a
   * specific breakpoint for example, when using the print media query.
   */
  /**
     * Check if the Fendy breakpoint reference has the given breakpoint defined.
     */
}

.u-pad-s--left {
  padding-left: 0.5rem;
  /**
   * Check if the breakpoint map is defined
   */
  /**
       * For every breakpoint, define responsive class for given rules
       * (content) inside it's corresponding media query.
       */
  /**
   * Check if breakpoints are provided.
   *
   * There may be cases where you only want to target media types, not a
   * specific breakpoint for example, when using the print media query.
   */
  /**
     * Check if the Fendy breakpoint reference has the given breakpoint defined.
     */
  /**
       * For every breakpoint, define responsive class for given rules
       * (content) inside it's corresponding media query.
       */
  /**
   * Check if breakpoints are provided.
   *
   * There may be cases where you only want to target media types, not a
   * specific breakpoint for example, when using the print media query.
   */
  /**
     * Check if the Fendy breakpoint reference has the given breakpoint defined.
     */
}

/**
     * Defines measure of padding for the entire content box
     */
.u-pad-m {
  padding: 1rem;
  /**
   * Check if the breakpoint map is defined
   */
  /**
       * For every breakpoint, define responsive class for given rules
       * (content) inside it's corresponding media query.
       */
  /**
   * Check if breakpoints are provided.
   *
   * There may be cases where you only want to target media types, not a
   * specific breakpoint for example, when using the print media query.
   */
  /**
     * Check if the Fendy breakpoint reference has the given breakpoint defined.
     */
  /**
       * For every breakpoint, define responsive class for given rules
       * (content) inside it's corresponding media query.
       */
  /**
   * Check if breakpoints are provided.
   *
   * There may be cases where you only want to target media types, not a
   * specific breakpoint for example, when using the print media query.
   */
  /**
     * Check if the Fendy breakpoint reference has the given breakpoint defined.
     */
}

/**
     * Defines measure of padding for the vertical axis of the
     * content box
     */
.u-pad-m--vertical {
  padding-top: 1rem;
  padding-bottom: 1rem;
  /**
   * Check if the breakpoint map is defined
   */
  /**
       * For every breakpoint, define responsive class for given rules
       * (content) inside it's corresponding media query.
       */
  /**
   * Check if breakpoints are provided.
   *
   * There may be cases where you only want to target media types, not a
   * specific breakpoint for example, when using the print media query.
   */
  /**
     * Check if the Fendy breakpoint reference has the given breakpoint defined.
     */
  /**
       * For every breakpoint, define responsive class for given rules
       * (content) inside it's corresponding media query.
       */
  /**
   * Check if breakpoints are provided.
   *
   * There may be cases where you only want to target media types, not a
   * specific breakpoint for example, when using the print media query.
   */
  /**
     * Check if the Fendy breakpoint reference has the given breakpoint defined.
     */
}

/**
     * Defines measure of padding for the horizontal axis of
     * the content box
     */
.u-pad-m--horizontal {
  padding-left: 1rem;
  padding-right: 1rem;
  /**
   * Check if the breakpoint map is defined
   */
  /**
       * For every breakpoint, define responsive class for given rules
       * (content) inside it's corresponding media query.
       */
  /**
   * Check if breakpoints are provided.
   *
   * There may be cases where you only want to target media types, not a
   * specific breakpoint for example, when using the print media query.
   */
  /**
     * Check if the Fendy breakpoint reference has the given breakpoint defined.
     */
  /**
       * For every breakpoint, define responsive class for given rules
       * (content) inside it's corresponding media query.
       */
  /**
   * Check if breakpoints are provided.
   *
   * There may be cases where you only want to target media types, not a
   * specific breakpoint for example, when using the print media query.
   */
  /**
     * Check if the Fendy breakpoint reference has the given breakpoint defined.
     */
}

/**
     * Defines measure of padding for each side of the content box
     */
.u-pad-m--top {
  padding-top: 1rem;
  /**
   * Check if the breakpoint map is defined
   */
  /**
       * For every breakpoint, define responsive class for given rules
       * (content) inside it's corresponding media query.
       */
  /**
   * Check if breakpoints are provided.
   *
   * There may be cases where you only want to target media types, not a
   * specific breakpoint for example, when using the print media query.
   */
  /**
     * Check if the Fendy breakpoint reference has the given breakpoint defined.
     */
  /**
       * For every breakpoint, define responsive class for given rules
       * (content) inside it's corresponding media query.
       */
  /**
   * Check if breakpoints are provided.
   *
   * There may be cases where you only want to target media types, not a
   * specific breakpoint for example, when using the print media query.
   */
  /**
     * Check if the Fendy breakpoint reference has the given breakpoint defined.
     */
}

.u-pad-m--right {
  padding-right: 1rem;
  /**
   * Check if the breakpoint map is defined
   */
  /**
       * For every breakpoint, define responsive class for given rules
       * (content) inside it's corresponding media query.
       */
  /**
   * Check if breakpoints are provided.
   *
   * There may be cases where you only want to target media types, not a
   * specific breakpoint for example, when using the print media query.
   */
  /**
     * Check if the Fendy breakpoint reference has the given breakpoint defined.
     */
  /**
       * For every breakpoint, define responsive class for given rules
       * (content) inside it's corresponding media query.
       */
  /**
   * Check if breakpoints are provided.
   *
   * There may be cases where you only want to target media types, not a
   * specific breakpoint for example, when using the print media query.
   */
  /**
     * Check if the Fendy breakpoint reference has the given breakpoint defined.
     */
}

.u-pad-m--bottom {
  padding-bottom: 1rem;
  /**
   * Check if the breakpoint map is defined
   */
  /**
       * For every breakpoint, define responsive class for given rules
       * (content) inside it's corresponding media query.
       */
  /**
   * Check if breakpoints are provided.
   *
   * There may be cases where you only want to target media types, not a
   * specific breakpoint for example, when using the print media query.
   */
  /**
     * Check if the Fendy breakpoint reference has the given breakpoint defined.
     */
  /**
       * For every breakpoint, define responsive class for given rules
       * (content) inside it's corresponding media query.
       */
  /**
   * Check if breakpoints are provided.
   *
   * There may be cases where you only want to target media types, not a
   * specific breakpoint for example, when using the print media query.
   */
  /**
     * Check if the Fendy breakpoint reference has the given breakpoint defined.
     */
}

.u-pad-m--left {
  padding-left: 1rem;
  /**
   * Check if the breakpoint map is defined
   */
  /**
       * For every breakpoint, define responsive class for given rules
       * (content) inside it's corresponding media query.
       */
  /**
   * Check if breakpoints are provided.
   *
   * There may be cases where you only want to target media types, not a
   * specific breakpoint for example, when using the print media query.
   */
  /**
     * Check if the Fendy breakpoint reference has the given breakpoint defined.
     */
  /**
       * For every breakpoint, define responsive class for given rules
       * (content) inside it's corresponding media query.
       */
  /**
   * Check if breakpoints are provided.
   *
   * There may be cases where you only want to target media types, not a
   * specific breakpoint for example, when using the print media query.
   */
  /**
     * Check if the Fendy breakpoint reference has the given breakpoint defined.
     */
}

/**
     * Defines measure of padding for the entire content box
     */
.u-pad-l {
  padding: 1.5rem;
  /**
   * Check if the breakpoint map is defined
   */
  /**
       * For every breakpoint, define responsive class for given rules
       * (content) inside it's corresponding media query.
       */
  /**
   * Check if breakpoints are provided.
   *
   * There may be cases where you only want to target media types, not a
   * specific breakpoint for example, when using the print media query.
   */
  /**
     * Check if the Fendy breakpoint reference has the given breakpoint defined.
     */
  /**
       * For every breakpoint, define responsive class for given rules
       * (content) inside it's corresponding media query.
       */
  /**
   * Check if breakpoints are provided.
   *
   * There may be cases where you only want to target media types, not a
   * specific breakpoint for example, when using the print media query.
   */
  /**
     * Check if the Fendy breakpoint reference has the given breakpoint defined.
     */
}

/**
     * Defines measure of padding for the vertical axis of the
     * content box
     */
.u-pad-l--vertical {
  padding-top: 1.5rem;
  padding-bottom: 1.5rem;
  /**
   * Check if the breakpoint map is defined
   */
  /**
       * For every breakpoint, define responsive class for given rules
       * (content) inside it's corresponding media query.
       */
  /**
   * Check if breakpoints are provided.
   *
   * There may be cases where you only want to target media types, not a
   * specific breakpoint for example, when using the print media query.
   */
  /**
     * Check if the Fendy breakpoint reference has the given breakpoint defined.
     */
  /**
       * For every breakpoint, define responsive class for given rules
       * (content) inside it's corresponding media query.
       */
  /**
   * Check if breakpoints are provided.
   *
   * There may be cases where you only want to target media types, not a
   * specific breakpoint for example, when using the print media query.
   */
  /**
     * Check if the Fendy breakpoint reference has the given breakpoint defined.
     */
}

/**
     * Defines measure of padding for the horizontal axis of
     * the content box
     */
.u-pad-l--horizontal {
  padding-left: 1.5rem;
  padding-right: 1.5rem;
  /**
   * Check if the breakpoint map is defined
   */
  /**
       * For every breakpoint, define responsive class for given rules
       * (content) inside it's corresponding media query.
       */
  /**
   * Check if breakpoints are provided.
   *
   * There may be cases where you only want to target media types, not a
   * specific breakpoint for example, when using the print media query.
   */
  /**
     * Check if the Fendy breakpoint reference has the given breakpoint defined.
     */
  /**
       * For every breakpoint, define responsive class for given rules
       * (content) inside it's corresponding media query.
       */
  /**
   * Check if breakpoints are provided.
   *
   * There may be cases where you only want to target media types, not a
   * specific breakpoint for example, when using the print media query.
   */
  /**
     * Check if the Fendy breakpoint reference has the given breakpoint defined.
     */
}

/**
     * Defines measure of padding for each side of the content box
     */
.u-pad-l--top {
  padding-top: 1.5rem;
  /**
   * Check if the breakpoint map is defined
   */
  /**
       * For every breakpoint, define responsive class for given rules
       * (content) inside it's corresponding media query.
       */
  /**
   * Check if breakpoints are provided.
   *
   * There may be cases where you only want to target media types, not a
   * specific breakpoint for example, when using the print media query.
   */
  /**
     * Check if the Fendy breakpoint reference has the given breakpoint defined.
     */
  /**
       * For every breakpoint, define responsive class for given rules
       * (content) inside it's corresponding media query.
       */
  /**
   * Check if breakpoints are provided.
   *
   * There may be cases where you only want to target media types, not a
   * specific breakpoint for example, when using the print media query.
   */
  /**
     * Check if the Fendy breakpoint reference has the given breakpoint defined.
     */
}

.u-pad-l--right {
  padding-right: 1.5rem;
  /**
   * Check if the breakpoint map is defined
   */
  /**
       * For every breakpoint, define responsive class for given rules
       * (content) inside it's corresponding media query.
       */
  /**
   * Check if breakpoints are provided.
   *
   * There may be cases where you only want to target media types, not a
   * specific breakpoint for example, when using the print media query.
   */
  /**
     * Check if the Fendy breakpoint reference has the given breakpoint defined.
     */
  /**
       * For every breakpoint, define responsive class for given rules
       * (content) inside it's corresponding media query.
       */
  /**
   * Check if breakpoints are provided.
   *
   * There may be cases where you only want to target media types, not a
   * specific breakpoint for example, when using the print media query.
   */
  /**
     * Check if the Fendy breakpoint reference has the given breakpoint defined.
     */
}

.u-pad-l--bottom {
  padding-bottom: 1.5rem;
  /**
   * Check if the breakpoint map is defined
   */
  /**
       * For every breakpoint, define responsive class for given rules
       * (content) inside it's corresponding media query.
       */
  /**
   * Check if breakpoints are provided.
   *
   * There may be cases where you only want to target media types, not a
   * specific breakpoint for example, when using the print media query.
   */
  /**
     * Check if the Fendy breakpoint reference has the given breakpoint defined.
     */
  /**
       * For every breakpoint, define responsive class for given rules
       * (content) inside it's corresponding media query.
       */
  /**
   * Check if breakpoints are provided.
   *
   * There may be cases where you only want to target media types, not a
   * specific breakpoint for example, when using the print media query.
   */
  /**
     * Check if the Fendy breakpoint reference has the given breakpoint defined.
     */
}

.u-pad-l--left {
  padding-left: 1.5rem;
  /**
   * Check if the breakpoint map is defined
   */
  /**
       * For every breakpoint, define responsive class for given rules
       * (content) inside it's corresponding media query.
       */
  /**
   * Check if breakpoints are provided.
   *
   * There may be cases where you only want to target media types, not a
   * specific breakpoint for example, when using the print media query.
   */
  /**
     * Check if the Fendy breakpoint reference has the given breakpoint defined.
     */
  /**
       * For every breakpoint, define responsive class for given rules
       * (content) inside it's corresponding media query.
       */
  /**
   * Check if breakpoints are provided.
   *
   * There may be cases where you only want to target media types, not a
   * specific breakpoint for example, when using the print media query.
   */
  /**
     * Check if the Fendy breakpoint reference has the given breakpoint defined.
     */
}

/**
     * Defines measure of padding for the entire content box
     */
.u-pad-xl {
  padding: 2rem;
  /**
   * Check if the breakpoint map is defined
   */
  /**
       * For every breakpoint, define responsive class for given rules
       * (content) inside it's corresponding media query.
       */
  /**
   * Check if breakpoints are provided.
   *
   * There may be cases where you only want to target media types, not a
   * specific breakpoint for example, when using the print media query.
   */
  /**
     * Check if the Fendy breakpoint reference has the given breakpoint defined.
     */
  /**
       * For every breakpoint, define responsive class for given rules
       * (content) inside it's corresponding media query.
       */
  /**
   * Check if breakpoints are provided.
   *
   * There may be cases where you only want to target media types, not a
   * specific breakpoint for example, when using the print media query.
   */
  /**
     * Check if the Fendy breakpoint reference has the given breakpoint defined.
     */
}

/**
     * Defines measure of padding for the vertical axis of the
     * content box
     */
.u-pad-xl--vertical {
  padding-top: 2rem;
  padding-bottom: 2rem;
  /**
   * Check if the breakpoint map is defined
   */
  /**
       * For every breakpoint, define responsive class for given rules
       * (content) inside it's corresponding media query.
       */
  /**
   * Check if breakpoints are provided.
   *
   * There may be cases where you only want to target media types, not a
   * specific breakpoint for example, when using the print media query.
   */
  /**
     * Check if the Fendy breakpoint reference has the given breakpoint defined.
     */
  /**
       * For every breakpoint, define responsive class for given rules
       * (content) inside it's corresponding media query.
       */
  /**
   * Check if breakpoints are provided.
   *
   * There may be cases where you only want to target media types, not a
   * specific breakpoint for example, when using the print media query.
   */
  /**
     * Check if the Fendy breakpoint reference has the given breakpoint defined.
     */
}

/**
     * Defines measure of padding for the horizontal axis of
     * the content box
     */
.u-pad-xl--horizontal {
  padding-left: 2rem;
  padding-right: 2rem;
  /**
   * Check if the breakpoint map is defined
   */
  /**
       * For every breakpoint, define responsive class for given rules
       * (content) inside it's corresponding media query.
       */
  /**
   * Check if breakpoints are provided.
   *
   * There may be cases where you only want to target media types, not a
   * specific breakpoint for example, when using the print media query.
   */
  /**
     * Check if the Fendy breakpoint reference has the given breakpoint defined.
     */
  /**
       * For every breakpoint, define responsive class for given rules
       * (content) inside it's corresponding media query.
       */
  /**
   * Check if breakpoints are provided.
   *
   * There may be cases where you only want to target media types, not a
   * specific breakpoint for example, when using the print media query.
   */
  /**
     * Check if the Fendy breakpoint reference has the given breakpoint defined.
     */
}

/**
     * Defines measure of padding for each side of the content box
     */
.u-pad-xl--top {
  padding-top: 2rem;
  /**
   * Check if the breakpoint map is defined
   */
  /**
       * For every breakpoint, define responsive class for given rules
       * (content) inside it's corresponding media query.
       */
  /**
   * Check if breakpoints are provided.
   *
   * There may be cases where you only want to target media types, not a
   * specific breakpoint for example, when using the print media query.
   */
  /**
     * Check if the Fendy breakpoint reference has the given breakpoint defined.
     */
  /**
       * For every breakpoint, define responsive class for given rules
       * (content) inside it's corresponding media query.
       */
  /**
   * Check if breakpoints are provided.
   *
   * There may be cases where you only want to target media types, not a
   * specific breakpoint for example, when using the print media query.
   */
  /**
     * Check if the Fendy breakpoint reference has the given breakpoint defined.
     */
}

.u-pad-xl--right {
  padding-right: 2rem;
  /**
   * Check if the breakpoint map is defined
   */
  /**
       * For every breakpoint, define responsive class for given rules
       * (content) inside it's corresponding media query.
       */
  /**
   * Check if breakpoints are provided.
   *
   * There may be cases where you only want to target media types, not a
   * specific breakpoint for example, when using the print media query.
   */
  /**
     * Check if the Fendy breakpoint reference has the given breakpoint defined.
     */
  /**
       * For every breakpoint, define responsive class for given rules
       * (content) inside it's corresponding media query.
       */
  /**
   * Check if breakpoints are provided.
   *
   * There may be cases where you only want to target media types, not a
   * specific breakpoint for example, when using the print media query.
   */
  /**
     * Check if the Fendy breakpoint reference has the given breakpoint defined.
     */
}

.u-pad-xl--bottom {
  padding-bottom: 2rem;
  /**
   * Check if the breakpoint map is defined
   */
  /**
       * For every breakpoint, define responsive class for given rules
       * (content) inside it's corresponding media query.
       */
  /**
   * Check if breakpoints are provided.
   *
   * There may be cases where you only want to target media types, not a
   * specific breakpoint for example, when using the print media query.
   */
  /**
     * Check if the Fendy breakpoint reference has the given breakpoint defined.
     */
  /**
       * For every breakpoint, define responsive class for given rules
       * (content) inside it's corresponding media query.
       */
  /**
   * Check if breakpoints are provided.
   *
   * There may be cases where you only want to target media types, not a
   * specific breakpoint for example, when using the print media query.
   */
  /**
     * Check if the Fendy breakpoint reference has the given breakpoint defined.
     */
}

.u-pad-xl--left {
  padding-left: 2rem;
  /**
   * Check if the breakpoint map is defined
   */
  /**
       * For every breakpoint, define responsive class for given rules
       * (content) inside it's corresponding media query.
       */
  /**
   * Check if breakpoints are provided.
   *
   * There may be cases where you only want to target media types, not a
   * specific breakpoint for example, when using the print media query.
   */
  /**
     * Check if the Fendy breakpoint reference has the given breakpoint defined.
     */
  /**
       * For every breakpoint, define responsive class for given rules
       * (content) inside it's corresponding media query.
       */
  /**
   * Check if breakpoints are provided.
   *
   * There may be cases where you only want to target media types, not a
   * specific breakpoint for example, when using the print media query.
   */
  /**
     * Check if the Fendy breakpoint reference has the given breakpoint defined.
     */
}

/**
 * ==============================================
 * Text utilities
 * ==============================================
 *
 * This file contains utilities for text.
 *
 * CONTENTS:
 * 1. Options
 * 2. Alignment
 * 3. Transform
 * 4. Truncate
 */
/**
  * ==============================================
  * #OPTIONS
  * ==============================================
  */
/**
 * ==============================================
 * #ALIGNMENT
 * ==============================================
 */
.u-text-left {
  text-align: left;
}

.u-text-center {
  text-align: center;
}

.u-text-right {
  text-align: right;
}

/**
 * ==============================================
 * #TRANSFORM
 * ==============================================
 */
.u-text-uppercase {
  text-transform: uppercase;
}

.u-text-lowercase {
  text-transform: lowercase;
}

.u-text-capitalize {
  text-transform: capitalize;
}

/**
 * ==============================================
 * #TRUNCATE
 * ==============================================
 */
.u-text-truncate {
  width: 100%;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

/**
 * Defines a variation of the text truncate class that defines text truncate for
 * multiline text.
 *
 * DISCLAIMER: Only works for webkit browsers
 */
/* stylelint-disable property-no-vendor-prefix, value-no-vendor-prefix */
.u-text-truncate--multiline {
  display: -webkit-box;
  -webkit-line-clamp: 3;
  -webkit-box-orient: vertical;
  overflow: hidden;
  text-overflow: ellipsis;
}

/* stylelint-enable */
/**
 * ==============================================
 * Typography utilities
 * ==============================================
 *
 * This file contains utility classes for typography font sizes.
 *
 * @require Map       $typography-sizes
 * @require Function  calc-em()
 */
/**
 * Creates typography font size utility classes for every key defined in the
 * typography sizes map.
 */
/**
   * Check if the typography sizes map is defined and populated.
   */
.t3 {
  font-size: 1.25em;
}

.t2 {
  font-size: 1.125em;
}

.t1 {
  font-size: 1em;
}

.s1 {
  font-size: 0.875em;
}

.s2 {
  font-size: 0.75em;
}

/**
 * ==============================================
 * Vertical align utility classes
 * ==============================================
 *
 * This file contains classes for aligning content vertically.
 */
.u-align-baseline {
  vertical-align: baseline;
}

.u-align-bottom {
  vertical-align: bottom;
}

.u-align-middle {
  vertical-align: middle;
}

.u-align-top {
  vertical-align: top;
}

/**
 * ==============================================
 * Widths utilities
 * ==============================================
 *
 * This file contains utilities for giving elements a specific width.
 *
 * @require Number  $fendy-grid-column-count
 * @require Mixin   responsive-states()
 *
 * CONTENTS:
 * 1. Options
 * 2. Classes
 */
/**
 * ==============================================
 * #OPTIONS
 * ==============================================
 */
/**
 * Define $fendy-grid-column-count in case it's not found.
 */
/**
 * ==============================================
 * #CLASSES
 * ==============================================
 */
/**
 * Defines width utilities
 */
.u-1of12 {
  width: 8.33333%;
  /**
   * Check if the breakpoint map is defined
   */
  /**
       * For every breakpoint, define responsive class for given rules
       * (content) inside it's corresponding media query.
       */
  /**
   * Check if breakpoints are provided.
   *
   * There may be cases where you only want to target media types, not a
   * specific breakpoint for example, when using the print media query.
   */
  /**
     * Check if the Fendy breakpoint reference has the given breakpoint defined.
     */
  /**
       * For every breakpoint, define responsive class for given rules
       * (content) inside it's corresponding media query.
       */
  /**
   * Check if breakpoints are provided.
   *
   * There may be cases where you only want to target media types, not a
   * specific breakpoint for example, when using the print media query.
   */
  /**
     * Check if the Fendy breakpoint reference has the given breakpoint defined.
     */
}

.u-2of12 {
  width: 16.66667%;
  /**
   * Check if the breakpoint map is defined
   */
  /**
       * For every breakpoint, define responsive class for given rules
       * (content) inside it's corresponding media query.
       */
  /**
   * Check if breakpoints are provided.
   *
   * There may be cases where you only want to target media types, not a
   * specific breakpoint for example, when using the print media query.
   */
  /**
     * Check if the Fendy breakpoint reference has the given breakpoint defined.
     */
  /**
       * For every breakpoint, define responsive class for given rules
       * (content) inside it's corresponding media query.
       */
  /**
   * Check if breakpoints are provided.
   *
   * There may be cases where you only want to target media types, not a
   * specific breakpoint for example, when using the print media query.
   */
  /**
     * Check if the Fendy breakpoint reference has the given breakpoint defined.
     */
}

.u-3of12 {
  width: 25%;
  /**
   * Check if the breakpoint map is defined
   */
  /**
       * For every breakpoint, define responsive class for given rules
       * (content) inside it's corresponding media query.
       */
  /**
   * Check if breakpoints are provided.
   *
   * There may be cases where you only want to target media types, not a
   * specific breakpoint for example, when using the print media query.
   */
  /**
     * Check if the Fendy breakpoint reference has the given breakpoint defined.
     */
  /**
       * For every breakpoint, define responsive class for given rules
       * (content) inside it's corresponding media query.
       */
  /**
   * Check if breakpoints are provided.
   *
   * There may be cases where you only want to target media types, not a
   * specific breakpoint for example, when using the print media query.
   */
  /**
     * Check if the Fendy breakpoint reference has the given breakpoint defined.
     */
}

.u-4of12 {
  width: 33.33333%;
  /**
   * Check if the breakpoint map is defined
   */
  /**
       * For every breakpoint, define responsive class for given rules
       * (content) inside it's corresponding media query.
       */
  /**
   * Check if breakpoints are provided.
   *
   * There may be cases where you only want to target media types, not a
   * specific breakpoint for example, when using the print media query.
   */
  /**
     * Check if the Fendy breakpoint reference has the given breakpoint defined.
     */
  /**
       * For every breakpoint, define responsive class for given rules
       * (content) inside it's corresponding media query.
       */
  /**
   * Check if breakpoints are provided.
   *
   * There may be cases where you only want to target media types, not a
   * specific breakpoint for example, when using the print media query.
   */
  /**
     * Check if the Fendy breakpoint reference has the given breakpoint defined.
     */
}

.u-5of12 {
  width: 41.66667%;
  /**
   * Check if the breakpoint map is defined
   */
  /**
       * For every breakpoint, define responsive class for given rules
       * (content) inside it's corresponding media query.
       */
  /**
   * Check if breakpoints are provided.
   *
   * There may be cases where you only want to target media types, not a
   * specific breakpoint for example, when using the print media query.
   */
  /**
     * Check if the Fendy breakpoint reference has the given breakpoint defined.
     */
  /**
       * For every breakpoint, define responsive class for given rules
       * (content) inside it's corresponding media query.
       */
  /**
   * Check if breakpoints are provided.
   *
   * There may be cases where you only want to target media types, not a
   * specific breakpoint for example, when using the print media query.
   */
  /**
     * Check if the Fendy breakpoint reference has the given breakpoint defined.
     */
}

.u-6of12 {
  width: 50%;
  /**
   * Check if the breakpoint map is defined
   */
  /**
       * For every breakpoint, define responsive class for given rules
       * (content) inside it's corresponding media query.
       */
  /**
   * Check if breakpoints are provided.
   *
   * There may be cases where you only want to target media types, not a
   * specific breakpoint for example, when using the print media query.
   */
  /**
     * Check if the Fendy breakpoint reference has the given breakpoint defined.
     */
  /**
       * For every breakpoint, define responsive class for given rules
       * (content) inside it's corresponding media query.
       */
  /**
   * Check if breakpoints are provided.
   *
   * There may be cases where you only want to target media types, not a
   * specific breakpoint for example, when using the print media query.
   */
  /**
     * Check if the Fendy breakpoint reference has the given breakpoint defined.
     */
}

.u-7of12 {
  width: 58.33333%;
  /**
   * Check if the breakpoint map is defined
   */
  /**
       * For every breakpoint, define responsive class for given rules
       * (content) inside it's corresponding media query.
       */
  /**
   * Check if breakpoints are provided.
   *
   * There may be cases where you only want to target media types, not a
   * specific breakpoint for example, when using the print media query.
   */
  /**
     * Check if the Fendy breakpoint reference has the given breakpoint defined.
     */
  /**
       * For every breakpoint, define responsive class for given rules
       * (content) inside it's corresponding media query.
       */
  /**
   * Check if breakpoints are provided.
   *
   * There may be cases where you only want to target media types, not a
   * specific breakpoint for example, when using the print media query.
   */
  /**
     * Check if the Fendy breakpoint reference has the given breakpoint defined.
     */
}

.u-8of12 {
  width: 66.66667%;
  /**
   * Check if the breakpoint map is defined
   */
  /**
       * For every breakpoint, define responsive class for given rules
       * (content) inside it's corresponding media query.
       */
  /**
   * Check if breakpoints are provided.
   *
   * There may be cases where you only want to target media types, not a
   * specific breakpoint for example, when using the print media query.
   */
  /**
     * Check if the Fendy breakpoint reference has the given breakpoint defined.
     */
  /**
       * For every breakpoint, define responsive class for given rules
       * (content) inside it's corresponding media query.
       */
  /**
   * Check if breakpoints are provided.
   *
   * There may be cases where you only want to target media types, not a
   * specific breakpoint for example, when using the print media query.
   */
  /**
     * Check if the Fendy breakpoint reference has the given breakpoint defined.
     */
}

.u-9of12 {
  width: 75%;
  /**
   * Check if the breakpoint map is defined
   */
  /**
       * For every breakpoint, define responsive class for given rules
       * (content) inside it's corresponding media query.
       */
  /**
   * Check if breakpoints are provided.
   *
   * There may be cases where you only want to target media types, not a
   * specific breakpoint for example, when using the print media query.
   */
  /**
     * Check if the Fendy breakpoint reference has the given breakpoint defined.
     */
  /**
       * For every breakpoint, define responsive class for given rules
       * (content) inside it's corresponding media query.
       */
  /**
   * Check if breakpoints are provided.
   *
   * There may be cases where you only want to target media types, not a
   * specific breakpoint for example, when using the print media query.
   */
  /**
     * Check if the Fendy breakpoint reference has the given breakpoint defined.
     */
}

.u-10of12 {
  width: 83.33333%;
  /**
   * Check if the breakpoint map is defined
   */
  /**
       * For every breakpoint, define responsive class for given rules
       * (content) inside it's corresponding media query.
       */
  /**
   * Check if breakpoints are provided.
   *
   * There may be cases where you only want to target media types, not a
   * specific breakpoint for example, when using the print media query.
   */
  /**
     * Check if the Fendy breakpoint reference has the given breakpoint defined.
     */
  /**
       * For every breakpoint, define responsive class for given rules
       * (content) inside it's corresponding media query.
       */
  /**
   * Check if breakpoints are provided.
   *
   * There may be cases where you only want to target media types, not a
   * specific breakpoint for example, when using the print media query.
   */
  /**
     * Check if the Fendy breakpoint reference has the given breakpoint defined.
     */
}

.u-11of12 {
  width: 91.66667%;
  /**
   * Check if the breakpoint map is defined
   */
  /**
       * For every breakpoint, define responsive class for given rules
       * (content) inside it's corresponding media query.
       */
  /**
   * Check if breakpoints are provided.
   *
   * There may be cases where you only want to target media types, not a
   * specific breakpoint for example, when using the print media query.
   */
  /**
     * Check if the Fendy breakpoint reference has the given breakpoint defined.
     */
  /**
       * For every breakpoint, define responsive class for given rules
       * (content) inside it's corresponding media query.
       */
  /**
   * Check if breakpoints are provided.
   *
   * There may be cases where you only want to target media types, not a
   * specific breakpoint for example, when using the print media query.
   */
  /**
     * Check if the Fendy breakpoint reference has the given breakpoint defined.
     */
}

.u-12of12 {
  width: 100%;
  /**
   * Check if the breakpoint map is defined
   */
  /**
       * For every breakpoint, define responsive class for given rules
       * (content) inside it's corresponding media query.
       */
  /**
   * Check if breakpoints are provided.
   *
   * There may be cases where you only want to target media types, not a
   * specific breakpoint for example, when using the print media query.
   */
  /**
     * Check if the Fendy breakpoint reference has the given breakpoint defined.
     */
  /**
       * For every breakpoint, define responsive class for given rules
       * (content) inside it's corresponding media query.
       */
  /**
   * Check if breakpoints are provided.
   *
   * There may be cases where you only want to target media types, not a
   * specific breakpoint for example, when using the print media query.
   */
  /**
     * Check if the Fendy breakpoint reference has the given breakpoint defined.
     */
}

@media screen and (min-width: 601px) {
  .o-wrapper\@tab {
    max-width: 1280px;
    margin: 0 auto;
  }
  .o-wrapper--full\@tab {
    width: 100%;
    margin: 0;
  }
  .c-portfolio {
    top: 100vh;
    -webkit-transform: translateY(-100%);
            transform: translateY(-100%);
  }
  .c-portfolio__list {
    width: calc(22em * 6);
    top: initial;
    left: 20%;
    -ms-flex-wrap: nowrap;
        flex-wrap: nowrap;
  }
  .c-portfolio__item,
  [class*='c-portfolio__item--'] {
    width: 22em;
    margin: 0 1rem;
  }
  .u-block\@tab {
    display: block;
  }
  .u-inline\@tab {
    display: inline;
  }
  .u-inline-block\@tab {
    display: inline-block;
  }
  .u-hidden\@tab {
    display: none;
  }
  .u-visible\@tab {
    visibility: visible;
  }
  .u-invisible\@tab {
    visibility: hidden;
  }
  .u-pad-s\@tab {
    padding: 0.5rem;
  }
  .u-pad-s--vertical\@tab {
    padding-top: 0.5rem;
    padding-bottom: 0.5rem;
  }
  .u-pad-s--horizontal\@tab {
    padding-left: 0.5rem;
    padding-right: 0.5rem;
  }
  .u-pad-s--top\@tab {
    padding-top: 0.5rem;
  }
  .u-pad-s--right\@tab {
    padding-right: 0.5rem;
  }
  .u-pad-s--bottom\@tab {
    padding-bottom: 0.5rem;
  }
  .u-pad-s--left\@tab {
    padding-left: 0.5rem;
  }
  .u-pad-m\@tab {
    padding: 1rem;
  }
  .u-pad-m--vertical\@tab {
    padding-top: 1rem;
    padding-bottom: 1rem;
  }
  .u-pad-m--horizontal\@tab {
    padding-left: 1rem;
    padding-right: 1rem;
  }
  .u-pad-m--top\@tab {
    padding-top: 1rem;
  }
  .u-pad-m--right\@tab {
    padding-right: 1rem;
  }
  .u-pad-m--bottom\@tab {
    padding-bottom: 1rem;
  }
  .u-pad-m--left\@tab {
    padding-left: 1rem;
  }
  .u-pad-l\@tab {
    padding: 1.5rem;
  }
  .u-pad-l--vertical\@tab {
    padding-top: 1.5rem;
    padding-bottom: 1.5rem;
  }
  .u-pad-l--horizontal\@tab {
    padding-left: 1.5rem;
    padding-right: 1.5rem;
  }
  .u-pad-l--top\@tab {
    padding-top: 1.5rem;
  }
  .u-pad-l--right\@tab {
    padding-right: 1.5rem;
  }
  .u-pad-l--bottom\@tab {
    padding-bottom: 1.5rem;
  }
  .u-pad-l--left\@tab {
    padding-left: 1.5rem;
  }
  .u-pad-xl\@tab {
    padding: 2rem;
  }
  .u-pad-xl--vertical\@tab {
    padding-top: 2rem;
    padding-bottom: 2rem;
  }
  .u-pad-xl--horizontal\@tab {
    padding-left: 2rem;
    padding-right: 2rem;
  }
  .u-pad-xl--top\@tab {
    padding-top: 2rem;
  }
  .u-pad-xl--right\@tab {
    padding-right: 2rem;
  }
  .u-pad-xl--bottom\@tab {
    padding-bottom: 2rem;
  }
  .u-pad-xl--left\@tab {
    padding-left: 2rem;
  }
  .u-1of12\@tab {
    width: 8.33333%;
  }
  .u-2of12\@tab {
    width: 16.66667%;
  }
  .u-3of12\@tab {
    width: 25%;
  }
  .u-4of12\@tab {
    width: 33.33333%;
  }
  .u-5of12\@tab {
    width: 41.66667%;
  }
  .u-6of12\@tab {
    width: 50%;
  }
  .u-7of12\@tab {
    width: 58.33333%;
  }
  .u-8of12\@tab {
    width: 66.66667%;
  }
  .u-9of12\@tab {
    width: 75%;
  }
  .u-10of12\@tab {
    width: 83.33333%;
  }
  .u-11of12\@tab {
    width: 91.66667%;
  }
  .u-12of12\@tab {
    width: 100%;
  }
}

@media screen and (min-width: 769px) {
  .o-wrapper\@lap {
    max-width: 1280px;
    margin: 0 auto;
  }
  .o-wrapper--full\@lap {
    width: 100%;
    margin: 0;
  }
  .c-site__hero::after {
    background-size: contain;
  }
  .u-block\@lap {
    display: block;
  }
  .u-inline\@lap {
    display: inline;
  }
  .u-inline-block\@lap {
    display: inline-block;
  }
  .u-hidden\@lap {
    display: none;
  }
  .u-visible\@lap {
    visibility: visible;
  }
  .u-invisible\@lap {
    visibility: hidden;
  }
  .u-pad-s\@lap {
    padding: 0.5rem;
  }
  .u-pad-s--vertical\@lap {
    padding-top: 0.5rem;
    padding-bottom: 0.5rem;
  }
  .u-pad-s--horizontal\@lap {
    padding-left: 0.5rem;
    padding-right: 0.5rem;
  }
  .u-pad-s--top\@lap {
    padding-top: 0.5rem;
  }
  .u-pad-s--right\@lap {
    padding-right: 0.5rem;
  }
  .u-pad-s--bottom\@lap {
    padding-bottom: 0.5rem;
  }
  .u-pad-s--left\@lap {
    padding-left: 0.5rem;
  }
  .u-pad-m\@lap {
    padding: 1rem;
  }
  .u-pad-m--vertical\@lap {
    padding-top: 1rem;
    padding-bottom: 1rem;
  }
  .u-pad-m--horizontal\@lap {
    padding-left: 1rem;
    padding-right: 1rem;
  }
  .u-pad-m--top\@lap {
    padding-top: 1rem;
  }
  .u-pad-m--right\@lap {
    padding-right: 1rem;
  }
  .u-pad-m--bottom\@lap {
    padding-bottom: 1rem;
  }
  .u-pad-m--left\@lap {
    padding-left: 1rem;
  }
  .u-pad-l\@lap {
    padding: 1.5rem;
  }
  .u-pad-l--vertical\@lap {
    padding-top: 1.5rem;
    padding-bottom: 1.5rem;
  }
  .u-pad-l--horizontal\@lap {
    padding-left: 1.5rem;
    padding-right: 1.5rem;
  }
  .u-pad-l--top\@lap {
    padding-top: 1.5rem;
  }
  .u-pad-l--right\@lap {
    padding-right: 1.5rem;
  }
  .u-pad-l--bottom\@lap {
    padding-bottom: 1.5rem;
  }
  .u-pad-l--left\@lap {
    padding-left: 1.5rem;
  }
  .u-pad-xl\@lap {
    padding: 2rem;
  }
  .u-pad-xl--vertical\@lap {
    padding-top: 2rem;
    padding-bottom: 2rem;
  }
  .u-pad-xl--horizontal\@lap {
    padding-left: 2rem;
    padding-right: 2rem;
  }
  .u-pad-xl--top\@lap {
    padding-top: 2rem;
  }
  .u-pad-xl--right\@lap {
    padding-right: 2rem;
  }
  .u-pad-xl--bottom\@lap {
    padding-bottom: 2rem;
  }
  .u-pad-xl--left\@lap {
    padding-left: 2rem;
  }
  .u-1of12\@lap {
    width: 8.33333%;
  }
  .u-2of12\@lap {
    width: 16.66667%;
  }
  .u-3of12\@lap {
    width: 25%;
  }
  .u-4of12\@lap {
    width: 33.33333%;
  }
  .u-5of12\@lap {
    width: 41.66667%;
  }
  .u-6of12\@lap {
    width: 50%;
  }
  .u-7of12\@lap {
    width: 58.33333%;
  }
  .u-8of12\@lap {
    width: 66.66667%;
  }
  .u-9of12\@lap {
    width: 75%;
  }
  .u-10of12\@lap {
    width: 83.33333%;
  }
  .u-11of12\@lap {
    width: 91.66667%;
  }
  .u-12of12\@lap {
    width: 100%;
  }
}

/*# sourceMappingURL=main.css.map */
